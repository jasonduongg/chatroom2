{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/Chatroom/Chatroom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Ably from 'ably';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatroom({\n  user,\n  isLoggedIn\n}) {\n  _s();\n  const [messages, setMessages] = useState({});\n  const [ablyClient, setAblyClient] = useState(null);\n  const [channel, setChannel] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [pollOptions, setPollOptions] = useState({});\n  const bottomOfChat = useRef(null);\n  useEffect(() => {\n    if (bottomOfChat.current) {\n      bottomOfChat.current.scrollIntoView();\n    }\n  }, [messages]);\n  const initializeChat = async () => {\n    if (isLoggedIn && !ablyClient) {\n      try {\n        const response = await fetch('http://localhost:5000/fetchMessages');\n        const fetchedMessages = await response.json();\n        const parsedMessages = fetchedMessages.map(message => {\n          const {\n            uuid,\n            user,\n            text,\n            pollOptions\n          } = message;\n          const poll = pollOptions ? Object.keys(pollOptions).reduce((acc, key) => {\n            acc[key] = pollOptions[key];\n            return acc;\n          }, {}) : {};\n          return {\n            uuid: uuid,\n            username: user,\n            message: text,\n            pollOptions: poll\n          };\n        });\n        setMessages(parsedMessages);\n        const ablyKey = 'gWdAvw.DxcdmQ:WYmbfWlXmbZBC5UeOKWXretPGWjPUCb_F-_x9-JpME4';\n        const client = new Ably.Realtime.Promise({\n          key: ablyKey\n        });\n        const chatChannel = client.channels.get('chat');\n        chatChannel.subscribe(message => {\n          console.log(message);\n          setMessages(prevMessages => {\n            const index = prevMessages.findIndex(msg => msg.uuid === message.data.uuid);\n            if (index !== -1) {\n              const updatedMessages = [...prevMessages];\n              console.log(message.data);\n              updatedMessages[index] = message.data;\n              return updatedMessages;\n            } else {\n              return [...prevMessages, message.data];\n            }\n          });\n        });\n        setAblyClient(client);\n        setChannel(chatChannel);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (isLoggedIn && !ablyClient) {\n      initializeChat();\n    }\n  }, [isLoggedIn]);\n  const sendMessage = async () => {\n    if (channel && newMessage.trim() !== '') {\n      const uuid = uuidv4();\n      const userData = {\n        CUSTOMER_ID: parseInt(googleProfile.id),\n        // Assuming CUSTOMER_ID is a string\n        CUSTOMER_EMAIL: googleProfile.email,\n        CUSTOMER_NAME: googleProfile.name\n      };\n      channel.publish(\"update\", userData);\n      await fetch('http://localhost:5000/sendMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uuid: uuid,\n          user: user.name,\n          text: newMessage.trim(),\n          pollOptions: pollOptions\n        })\n      });\n      setNewMessage('');\n      setPollOptions({});\n    }\n  };\n  const addUserToDatabase = googleProfile => {\n    const userData = {\n      CUSTOMER_ID: parseInt(googleProfile.id),\n      // Assuming CUSTOMER_ID is a string\n      CUSTOMER_EMAIL: googleProfile.email,\n      CUSTOMER_NAME: googleProfile.name\n    };\n    console.log(userData);\n    fetch('http://localhost:443/setUsers', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => console.log('User added successfully:', response)).catch(error => console.error('Failed to add user:', error));\n  };\n  const addPollOption = () => {\n    const index = Object.keys(pollOptions).length;\n    setPollOptions(prevOptions => ({\n      ...prevOptions,\n      [index]: {\n        ...prevOptions[index],\n        answer: \"\",\n        votes: 0\n      }\n    }));\n  };\n  const handlePollOptionChange = (index, value) => {\n    setPollOptions(prevOptions => ({\n      ...prevOptions,\n      [index]: {\n        ...prevOptions[index],\n        answer: value,\n        votes: prevOptions[index].votes // Keep the previous votes unchanged\n      }\n    }));\n  };\n  const handleVote = (uuid, voteIndex) => {\n    const apiUrl = `http://localhost:5000/vote/${uuid}/${voteIndex}`;\n    fetch(apiUrl, {\n      method: 'PUT'\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to vote');\n      }\n      return response.json();\n    }).then(data => {\n      console.log(data);\n      const test = {\n        uuid: data.uuid,\n        username: data.user,\n        message: data.text,\n        pollOptions: data.pollOptions\n      };\n      channel.publish(\"vote\", test);\n    }).catch(error => {\n      console.error('Error voting:', error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-row justify-center items-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-min\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl mb-2\",\n        children: \"User Chatroom Prototype\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-[300px] w-[500px] overflow-scroll snap-y border-2 border-black mb-2\",\n        children: [Object.entries(messages).map(([index, message]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-lg pl-2\",\n            children: message.username + \": \" + message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), \" \", Object.keys(message.pollOptions).length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-full h-full pl-4 pr-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-center\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \" Poll Options:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: Object.entries(message.pollOptions).map(([index, option]) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"flex flex-row justify-between mb-2\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"flex flex-row justify-between border-2 border-black w-full pl-2 pr-2 mr-2 inline-flex items-center align-middle\",\n                  children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                    children: index + \") \" + option.answer\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 49\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    children: option.votes\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 190,\n                    columnNumber: 49\n                  }, this)]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 188,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"border-2 border-black p-1\",\n                  onClick: () => handleVote(message.uuid, index),\n                  children: \"Vote\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 192,\n                  columnNumber: 45\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: bottomOfChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatroom, \"ax6+WlA5UGAaET2Ju/guLdfse00=\");\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Ably","v4","uuidv4","jsxDEV","_jsxDEV","Chatroom","user","isLoggedIn","_s","messages","setMessages","ablyClient","setAblyClient","channel","setChannel","newMessage","setNewMessage","pollOptions","setPollOptions","bottomOfChat","current","scrollIntoView","initializeChat","response","fetch","fetchedMessages","json","parsedMessages","map","message","uuid","text","poll","Object","keys","reduce","acc","key","username","ablyKey","client","Realtime","Promise","chatChannel","channels","get","subscribe","console","log","prevMessages","index","findIndex","msg","data","updatedMessages","error","sendMessage","trim","userData","CUSTOMER_ID","parseInt","googleProfile","id","CUSTOMER_EMAIL","email","CUSTOMER_NAME","name","publish","method","headers","body","JSON","stringify","addUserToDatabase","then","catch","addPollOption","length","prevOptions","answer","votes","handlePollOptionChange","value","handleVote","voteIndex","apiUrl","ok","Error","test","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","option","onClick","ref","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/Chatroom/Chatroom.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Ably from 'ably';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction Chatroom({ user, isLoggedIn }) {\n    const [messages, setMessages] = useState({});\n    const [ablyClient, setAblyClient] = useState(null);\n    const [channel, setChannel] = useState(null);\n\n    const [newMessage, setNewMessage] = useState('');\n    const [pollOptions, setPollOptions] = useState({});\n\n    const bottomOfChat = useRef(null);\n\n    useEffect(() => {\n        if (bottomOfChat.current) {\n            bottomOfChat.current.scrollIntoView();\n        }\n    }, [messages]);\n\n    const initializeChat = async () => {\n        if (isLoggedIn && !ablyClient) {\n            try {\n                const response = await fetch('http://localhost:5000/fetchMessages');\n                const fetchedMessages = await response.json();\n                const parsedMessages = fetchedMessages.map(message => {\n                    const { uuid, user, text, pollOptions } = message;\n                    const poll = pollOptions\n                    ? Object.keys(pollOptions).reduce((acc, key) => {\n                        acc[key] = pollOptions[key];\n                        return acc;\n                        }, {})\n                    : {}\n                    return {\n                        uuid: uuid,\n                        username: user,\n                        message: text,\n                        pollOptions: poll\n                    };\n                });                \n                setMessages(parsedMessages);\n                const ablyKey = 'gWdAvw.DxcdmQ:WYmbfWlXmbZBC5UeOKWXretPGWjPUCb_F-_x9-JpME4'\n                const client = new Ably.Realtime.Promise({ key: ablyKey });\n                const chatChannel = client.channels.get('chat');\n                chatChannel.subscribe((message) => {   \n                    console.log(message)\n                    setMessages(prevMessages => {\n                        const index = prevMessages.findIndex(msg => msg.uuid === message.data.uuid);\n                        if (index !== -1) {\n                            const updatedMessages = [...prevMessages];\n                            console.log(message.data)\n                            updatedMessages[index] = message.data;\n                            return updatedMessages;\n                        } else {\n                            return [...prevMessages, message.data];\n                        }\n                    });\n                });\n                \n                setAblyClient(client);\n                setChannel(chatChannel);\n            \n            } catch (error) {\n                console.error('Error fetching messages:', error);\n            }\n        }\n    };\n    \n    useEffect(() => {\n        if (isLoggedIn && !ablyClient) {\n            initializeChat();\n        }\n    }, [isLoggedIn]);\n    \n\n    const sendMessage = async () => {\n        if (channel && newMessage.trim() !== '') {\n            const uuid = uuidv4();\n            const userData = {\n                CUSTOMER_ID: parseInt(googleProfile.id), // Assuming CUSTOMER_ID is a string\n                CUSTOMER_EMAIL: googleProfile.email,\n                CUSTOMER_NAME: googleProfile.name\n            };\n            channel.publish(\"update\", userData);\n            await fetch('http://localhost:5000/sendMessage', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    uuid: uuid,\n                    user: user.name,\n                    text: newMessage.trim(),\n                    pollOptions: pollOptions\n                })\n            });\n            setNewMessage('');\n            setPollOptions({})\n        }\n    };\n\n    const addUserToDatabase = (googleProfile) => {\n        const userData = {\n            CUSTOMER_ID: parseInt(googleProfile.id), // Assuming CUSTOMER_ID is a string\n            CUSTOMER_EMAIL: googleProfile.email,\n            CUSTOMER_NAME: googleProfile.name\n        };\n\n        console.log(userData)\n        fetch('http://localhost:443/setUsers', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        })  \n        .then(response => console.log('User added successfully:', response))\n        .catch(error => console.error('Failed to add user:', error));\n    };\n\n    const addPollOption = () => {\n        const index = Object.keys(pollOptions).length;\n        setPollOptions(prevOptions => ({\n            ...prevOptions,\n            [index]: { \n                ...prevOptions[index],\n                answer: \"\",\n                votes: 0\n            }\n        }));\n    };\n\n    const handlePollOptionChange = (index, value) => {\n        setPollOptions(prevOptions => ({\n            ...prevOptions,\n            [index]: { \n                ...prevOptions[index],\n                answer: value,\n                votes: prevOptions[index].votes // Keep the previous votes unchanged\n            }\n        }));\n    };\n    const handleVote = (uuid, voteIndex) => {\n        const apiUrl = `http://localhost:5000/vote/${uuid}/${voteIndex}`;\n        fetch(apiUrl, {\n            method: 'PUT',\n        })\n        .then(response => {\n            if (!response.ok) {\n                throw new Error('Failed to vote');\n            }\n            return response.json();\n        })\n        .then(data => {\n            console.log(data)\n            const test = {\n                uuid: data.uuid,\n                username: data.user,\n                message: data.text,\n                pollOptions: data.pollOptions\n            };\n            channel.publish(\"vote\", test);\n        })\n        .catch(error => {\n            console.error('Error voting:', error);\n        });\n    };\n    \n    \n\n    return (\n        <div className=\"flex flex-row justify-center items-center\">\n            <div className=\"w-min\">\n                <h1 className='text-2xl mb-2'>User Chatroom Prototype</h1>\n                <div className='h-[300px] w-[500px] overflow-scroll snap-y border-2 border-black mb-2'>\n\n                {Object.entries(messages).map(([index, message]) => (\n                    <div key={index}>\n                        <p className='text-lg pl-2'>{message.username + \": \" + message.message}</p> {/* Render message text */}\n                        {Object.keys(message.pollOptions).length > 0 && (\n                            <div className='w-full h-full pl-4 pr-4'>\n                                <div className='text-center'>\n                                    <p> Poll Options:</p>\n                                </div>\n                                <ul>\n                                    {Object.entries(message.pollOptions).map(([index, option]) => (\n                                        <div key={index} className='flex flex-row justify-between mb-2'>    \n                                            <div key={index} className=\"flex flex-row justify-between border-2 border-black w-full pl-2 pr-2 mr-2 inline-flex items-center align-middle\">\n                                                <p>{index + \") \" +option.answer}</p>\n                                                <p>{option.votes}</p>\n                                            </div>\n                                            <button className=\"border-2 border-black p-1\" onClick={() => handleVote(message.uuid, index)}>Vote</button>\n                                        </div>\n                                        \n                                    ))}\n                                </ul>\n                            </div>\n                        )}\n\n                    </div>\n                ))}\n\n                    <div ref={bottomOfChat}></div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Chatroom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}