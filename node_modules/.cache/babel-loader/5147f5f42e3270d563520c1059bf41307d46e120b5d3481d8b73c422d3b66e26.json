{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/Chatroom/Chatroom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Ably from 'ably';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatroom({\n  user,\n  isLoggedIn\n}) {\n  _s();\n  const [messages, setMessages] = useState({});\n  const [ablyClient, setAblyClient] = useState(null);\n  const [channel, setChannel] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [pollOptions, setPollOptions] = useState({});\n  const bottomOfChat = useRef(null);\n  useEffect(() => {\n    if (bottomOfChat.current) {\n      bottomOfChat.current.scrollIntoView();\n    }\n  }, [messages]);\n  const initializeChat = async () => {\n    if (isLoggedIn && !ablyClient) {\n      try {\n        const response = await fetch('http://localhost:443/getMessages');\n        const fetchedMessages = await response.json();\n        const parsedMessages = fetchedMessages.map(message => {\n          const {\n            TIMESTAMP,\n            CUSTOMER_ID,\n            CUSTOMER_NAME,\n            MESSAGE\n          } = message;\n          const poll = pollOptions ? Object.keys(pollOptions).reduce((acc, key) => {\n            acc[key] = pollOptions[key];\n            return acc;\n          }, {}) : {};\n          return {\n            uuid: uuid,\n            username: user,\n            message: text,\n            pollOptions: poll\n          };\n        });\n        setMessages(parsedMessages);\n        const ablyKey = 'gWdAvw.DxcdmQ:WYmbfWlXmbZBC5UeOKWXretPGWjPUCb_F-_x9-JpME4';\n        const client = new Ably.Realtime.Promise({\n          key: ablyKey\n        });\n        const chatChannel = client.channels.get('chat');\n        chatChannel.subscribe(message => {\n          // console.log(message)\n          // setMessages(prevMessages => {\n          //     const index = prevMessages.findIndex(msg => msg.uuid === message.data.uuid);\n          //     if (index !== -1) {\n          //         const updatedMessages = [...prevMessages];\n          //         console.log(message.data)\n          //         updatedMessages[index] = message.data;\n          //         return updatedMessages;\n          //     } else {\n          //         return [...prevMessages, message.data];\n          //     }\n          // });\n        });\n        setAblyClient(client);\n        setChannel(chatChannel);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (isLoggedIn && !ablyClient) {\n      initializeChat();\n    }\n  }, [isLoggedIn]);\n  const sendMessage = async () => {\n    if (channel && newMessage.trim() !== '') {\n      const uuid = uuidv4();\n      const userData = {\n        TIMESTAMP: uuid,\n        CUSTOMER_NAME: user.name,\n        CUSTOMER_ID: parseInt(user.id),\n        MESSAGE: newMessage\n      };\n      channel.publish(\"update\", userData);\n      fetch('http://localhost:443/sendMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      }).then(response => console.log('Message added', response)).catch(error => console.error('Failed to add message:', error));\n    }\n  };\n  const addUserToDatabase = googleProfile => {\n    const userData = {\n      CUSTOMER_ID: parseInt(googleProfile.id),\n      // Assuming CUSTOMER_ID is a string\n      CUSTOMER_EMAIL: googleProfile.email,\n      CUSTOMER_NAME: googleProfile.name\n    };\n    fetch('http://localhost:443/setUsers', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => console.log('User added successfully:', response)).catch(error => console.error('Failed to add user:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-row justify-center items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-min\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl mb-2\",\n        children: \"User Chatroom Prototype\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-[300px] w-[500px] overflow-scroll snap-y border-2 border-black mb-2\",\n        children: [Object.entries(messages).map(([index, message]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-lg pl-2\",\n            children: message.username + \": \" + message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: bottomOfChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"border-2 border-black w-full min-h-min\",\n        type: \"text\",\n        value: newMessage,\n        placeholder: \"message Chatroom\",\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Add Poll Options \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"border-2 border-black pl-2 pr-2\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatroom, \"ax6+WlA5UGAaET2Ju/guLdfse00=\");\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Ably","v4","uuidv4","jsxDEV","_jsxDEV","Chatroom","user","isLoggedIn","_s","messages","setMessages","ablyClient","setAblyClient","channel","setChannel","newMessage","setNewMessage","pollOptions","setPollOptions","bottomOfChat","current","scrollIntoView","initializeChat","response","fetch","fetchedMessages","json","parsedMessages","map","message","TIMESTAMP","CUSTOMER_ID","CUSTOMER_NAME","MESSAGE","poll","Object","keys","reduce","acc","key","uuid","username","text","ablyKey","client","Realtime","Promise","chatChannel","channels","get","subscribe","error","console","sendMessage","trim","userData","name","parseInt","id","publish","method","headers","body","JSON","stringify","then","log","catch","addUserToDatabase","googleProfile","CUSTOMER_EMAIL","email","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","index","ref","type","value","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/Chatroom/Chatroom.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Ably from 'ably';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction Chatroom({ user, isLoggedIn }) {\n    const [messages, setMessages] = useState({});\n    const [ablyClient, setAblyClient] = useState(null);\n    const [channel, setChannel] = useState(null);\n\n    const [newMessage, setNewMessage] = useState('');\n    const [pollOptions, setPollOptions] = useState({});\n\n    const bottomOfChat = useRef(null);\n\n    useEffect(() => {\n        if (bottomOfChat.current) {\n            bottomOfChat.current.scrollIntoView();\n        }\n    }, [messages]);\n\n    const initializeChat = async () => {\n        if (isLoggedIn && !ablyClient) {\n            try {\n                const response = await fetch('http://localhost:443/getMessages');\n                const fetchedMessages = await response.json();\n                const parsedMessages = fetchedMessages.map(message => {\n                    const { TIMESTAMP, CUSTOMER_ID, CUSTOMER_NAME, MESSAGE  } = message;\n                    const poll = pollOptions\n                    ? Object.keys(pollOptions).reduce((acc, key) => {\n                        acc[key] = pollOptions[key];\n                        return acc;\n                        }, {})\n                    : {}\n                    return {\n                        uuid: uuid,\n                        username: user,\n                        message: text,\n                        pollOptions: poll\n                    };\n                });                \n                setMessages(parsedMessages);\n                const ablyKey = 'gWdAvw.DxcdmQ:WYmbfWlXmbZBC5UeOKWXretPGWjPUCb_F-_x9-JpME4'\n                const client = new Ably.Realtime.Promise({ key: ablyKey });\n                const chatChannel = client.channels.get('chat');\n\n                chatChannel.subscribe((message) => {   \n                    // console.log(message)\n                    // setMessages(prevMessages => {\n                    //     const index = prevMessages.findIndex(msg => msg.uuid === message.data.uuid);\n                    //     if (index !== -1) {\n                    //         const updatedMessages = [...prevMessages];\n                    //         console.log(message.data)\n                    //         updatedMessages[index] = message.data;\n                    //         return updatedMessages;\n                    //     } else {\n                    //         return [...prevMessages, message.data];\n                    //     }\n                    // });\n                });\n                setAblyClient(client);\n                setChannel(chatChannel);\n            \n            } catch (error) {\n                console.error('Error fetching messages:', error);\n            }\n        }\n    };\n    \n    useEffect(() => {\n        if (isLoggedIn && !ablyClient) {\n            initializeChat();\n        }\n    }, [isLoggedIn]);\n    \n\n    const sendMessage = async () => {\n        if (channel && newMessage.trim() !== '') {\n            const uuid = uuidv4();\n            const userData = {\n                TIMESTAMP: uuid,\n                CUSTOMER_NAME: user.name,\n                CUSTOMER_ID: parseInt(user.id),\n                MESSAGE: newMessage\n                \n\n            };\n            channel.publish(\"update\", userData);\n            fetch('http://localhost:443/sendMessage', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userData)\n            })  \n            .then(response => console.log('Message added', response))\n            .catch(error => console.error('Failed to add message:', error));\n        }\n    };\n\n    const addUserToDatabase = (googleProfile) => {\n        const userData = {\n            CUSTOMER_ID: parseInt(googleProfile.id), // Assuming CUSTOMER_ID is a string\n            CUSTOMER_EMAIL: googleProfile.email,\n            CUSTOMER_NAME: googleProfile.name\n        };\n\n        fetch('http://localhost:443/setUsers', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        })  \n        .then(response => console.log('User added successfully:', response))\n        .catch(error => console.error('Failed to add user:', error));\n    };\n\n\n    return (\n        <div className=\"flex flex-row justify-center items-center\">\n            <div className=\"w-min\">\n                <h1 className='text-2xl mb-2'>User Chatroom Prototype</h1>\n                <div className='h-[300px] w-[500px] overflow-scroll snap-y border-2 border-black mb-2'>\n\n                {Object.entries(messages).map(([index, message]) => (\n                    <div key={index}>\n                        <p className='text-lg pl-2'>{message.username + \": \" + message.message}</p>\n                    </div>\n                ))}\n\n                <div ref={bottomOfChat}></div>\n                </div>\n            </div>\n            <div>\n                    <textarea className=\"border-2 border-black w-full min-h-min\" type=\"text\" value={newMessage} placeholder=\"message Chatroom\" onChange={(e) => setNewMessage(e.target.value)} />\n                    <p> Add Poll Options </p>\n\n                        \n\n                    <button className=\"border-2 border-black pl-2 pr-2\" onClick={sendMessage}>Send</button>\n                </div>\n        </div>\n    );\n}\n\nexport default Chatroom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}