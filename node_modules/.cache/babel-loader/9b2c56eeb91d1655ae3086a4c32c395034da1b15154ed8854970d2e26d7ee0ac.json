{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/UserPanel/UserPanel.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DynamicChatroom from \"../../components/DynamicChatroom/DynamicChatroom.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPanel({\n  user\n}) {\n  _s();\n  const [chatrooms, setChatrooms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  ;\n  const [activeChatroomId, setActiveChatroomId] = useState(null);\n  const [activeChatroomName, setActiveChatroomName] = useState(null);\n  const [inviteCodeInput, setInviteCodeInput] = useState('');\n  const fetchChatrooms = async () => {\n    try {\n      const response = await fetch(`http://localhost:443/user/roomids?customerId=${user.id}&customerEmail=${user.email}`);\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"fetched\");\n        setChatrooms(data);\n      } else {\n        console.error('Failed to fetch chatrooms:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching chatrooms:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  console.log(chatrooms);\n  useEffect(() => {\n    fetchChatrooms();\n  }, [user.id]);\n  const handleToggleChatroom = (roomId, roomName) => {\n    if (chatrooms.some(chatroom => chatroom.roomId === roomId)) {\n      setActiveChatroomId(roomId === activeChatroomId ? null : roomId);\n      setActiveChatroomName(roomId === activeChatroomId ? null : roomName);\n    } else {\n      setActiveChatroomId(null);\n      setActiveChatroomName(null);\n    }\n  };\n  const handleLeaveRoom = async roomId => {\n    try {\n      const response = await fetch('http://localhost:443/leaveRoom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId,\n          customerId: user.id,\n          customerEmail: user.email\n        })\n      });\n      console.log(response);\n      if (response.ok) {\n        fetchChatrooms();\n        if (roomId === activeChatroomId) {\n          setActiveChatroomId(null); // Clear the active room if it's the one being left\n        }\n        console.log('Room left successfully');\n      } else {\n        const errorText = await response.text();\n        console.error(`Failed to leaving room: ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error leaving room:', error);\n    }\n  };\n  const handleAddUserToChatroom = async () => {\n    try {\n      // Assuming your server has an endpoint to handle this operation\n      const response = await fetch('http://localhost:443/addUserToChatroom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          customerId: user.id,\n          inviteCode: inviteCodeInput,\n          customerEmail: user.email\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`User added to chatroom with ID: ${data.chatroomId}`); // Assuming server sends back the chatroom ID\n        setInviteCodeInput(''); // Clear the input field after successful operation\n        fetchChatrooms();\n      } else {\n        console.error('Failed to add user to chatroom:', await response.text());\n      }\n    } catch (error) {\n      console.error('Error adding user to chatroom:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatrooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inviteCodeInput,\n      onChange: e => setInviteCodeInput(e.target.value),\n      placeholder: \"Enter invite code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddUserToChatroom,\n      children: \"Add to Chatroom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this) : chatrooms.map(chatroom => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }, this), \" \", chatroom.roomId, \",\", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this), \" \", chatroom.roomName, \",\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleLeaveRoom(chatroom.roomId),\n          children: \"Leave\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleToggleChatroom(chatroom.roomId, chatroom.roomName),\n          children: \"Toggle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 29\n        }, this)]\n      }, chatroom.roomId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"active-chatroom\",\n      children: activeChatroomId && /*#__PURE__*/_jsxDEV(DynamicChatroom, {\n        user: user,\n        isLoggedIn: true,\n        chatroomId: activeChatroomId,\n        chatroomName: activeChatroomName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminPanel, \"ztKOnRRUPoZRxwXbbGMbIXHgaCM=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","useEffect","DynamicChatroom","jsxDEV","_jsxDEV","AdminPanel","user","_s","chatrooms","setChatrooms","loading","setLoading","activeChatroomId","setActiveChatroomId","activeChatroomName","setActiveChatroomName","inviteCodeInput","setInviteCodeInput","fetchChatrooms","response","fetch","id","email","ok","data","json","console","log","error","status","handleToggleChatroom","roomId","roomName","some","chatroom","handleLeaveRoom","method","headers","body","JSON","stringify","customerId","customerEmail","errorText","text","handleAddUserToChatroom","inviteCode","chatroomId","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","className","isLoggedIn","chatroomName","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/UserPanel/UserPanel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport DynamicChatroom from \"../../components/DynamicChatroom/DynamicChatroom.tsx\";\n\nfunction AdminPanel({ user }) {\n    const [chatrooms, setChatrooms] = useState([]);\n    const [loading, setLoading] = useState(true);;\n    const [activeChatroomId, setActiveChatroomId] = useState(null);\n    const [activeChatroomName, setActiveChatroomName] = useState(null);\n    const [inviteCodeInput, setInviteCodeInput] = useState('');\n\n    const fetchChatrooms = async () => {\n        try {\n            const response = await fetch(`http://localhost:443/user/roomids?customerId=${user.id}&customerEmail=${user.email}`);\n            if (response.ok) {\n                const data = await response.json();\n                console.log(\"fetched\")\n                setChatrooms(data);\n            } else {\n                console.error('Failed to fetch chatrooms:', response.status);\n            }\n        } catch (error) {\n            console.error('Error fetching chatrooms:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n    console.log(chatrooms)\n\n    useEffect(() => {\n        fetchChatrooms();\n    }, [user.id]);\n\n    const handleToggleChatroom = (roomId, roomName) => {\n        if (chatrooms.some(chatroom => chatroom.roomId === roomId)) {\n            setActiveChatroomId(roomId === activeChatroomId ? null : roomId);\n            setActiveChatroomName(roomId === activeChatroomId ? null : roomName)\n        } else {\n            setActiveChatroomId(null);\n            setActiveChatroomName(null);\n        }\n    };\n\n    const handleLeaveRoom = async (roomId) => {\n        try {\n            const response = await fetch('http://localhost:443/leaveRoom', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    roomId,\n                    customerId: user.id,\n                    customerEmail: user.email\n                })\n            });\n            console.log(response)\n            if (response.ok) {\n                fetchChatrooms()                \n                if (roomId === activeChatroomId) {\n                    setActiveChatroomId(null);  // Clear the active room if it's the one being left\n                }\n                console.log('Room left successfully');\n            } else {\n                const errorText = await response.text();\n                console.error(`Failed to leaving room: ${errorText}`);\n            }\n        } catch (error) {\n            console.error('Error leaving room:', error);\n        }\n    };\n    \n\n    const handleAddUserToChatroom = async () => {\n        try {\n            // Assuming your server has an endpoint to handle this operation\n            const response = await fetch('http://localhost:443/addUserToChatroom', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    customerId: user.id,\n                    inviteCode: inviteCodeInput,\n                    customerEmail: user.email\n                })\n            });\n    \n            if (response.ok) {\n                const data = await response.json();\n                console.log(`User added to chatroom with ID: ${data.chatroomId}`);  // Assuming server sends back the chatroom ID\n                setInviteCodeInput('');  // Clear the input field after successful operation\n                fetchChatrooms()\n            } else {\n                console.error('Failed to add user to chatroom:', await response.text());\n            }\n        } catch (error) {\n            console.error('Error adding user to chatroom:', error);\n        }\n    };\n    \n    return (\n        <div>\n            <h2>Chatrooms</h2>\n            <input\n                type=\"text\"\n                value={inviteCodeInput}\n                onChange={(e) => setInviteCodeInput(e.target.value)}\n                placeholder=\"Enter invite code\"\n            />\n            <button onClick={handleAddUserToChatroom}>Add to Chatroom</button>\n        \n            <ul>\n                {loading ? (\n                    <p>Loading...</p>\n                ) : (\n                    chatrooms.map(chatroom => (\n                        <li key={chatroom.roomId}>\n                            <strong>ID:</strong> {chatroom.roomId},\n                            <strong>Name:</strong> {chatroom.roomName},\n                            <button onClick={() => handleLeaveRoom(chatroom.roomId)}>Leave</button>\n                            <button onClick={() => handleToggleChatroom(chatroom.roomId, chatroom.roomName)}>Toggle</button>\n                        </li>\n                    ))\n                )}\n            </ul>\n\n            <div className=\"active-chatroom\">\n                {activeChatroomId && (\n                    <DynamicChatroom user={user} isLoggedIn={true} chatroomId={activeChatroomId} chatroomName={activeChatroomName} />\n                    )}\n            </div>\n        </div>\n    );\n}\n\nexport default AdminPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}