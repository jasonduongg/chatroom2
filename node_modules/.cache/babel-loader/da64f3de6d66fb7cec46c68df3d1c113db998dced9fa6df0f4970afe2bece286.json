{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { googleLogout, useGoogleLogin } from '@react-oauth/google';\nimport axios from 'axios';\nimport AdminChatroom from \"./components/AdminChatroom/AdminChatroom.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const login = useGoogleLogin({\n    onSuccess: codeResponse => setUser(codeResponse),\n    onError: error => console.log('Login Failed:', error)\n  });\n  useEffect(() => {\n    if (user) {\n      axios.get(`https://www.googleapis.com/oauth2/v1/userinfo?access_token=${user.access_token}`, {\n        headers: {\n          Authorization: `Bearer ${user.access_token}`,\n          Accept: 'application/json'\n        }\n      }).then(res => {\n        setProfile(res.data);\n        addUserToDatabase(res.data); // Call the function to add user to database\n      }).catch(err => console.log(err));\n    }\n  }, [user]);\n  const addUserToDatabase = googleProfile => {\n    const userData = {\n      CUSTOMER_ID: googleProfile.id.toString(),\n      // Assuming CUSTOMER_ID is a string\n      CUSTOMER_EMAIL: googleProfile.email,\n      CUSTOMER_NAME: googleProfile.name\n    };\n    axios.post('http://localhost:3000/setUsers', userData).then(response => console.log('User added successfully:', response)).catch(error => console.error('Failed to add user:', error));\n  };\n  const logOut = () => {\n    googleLogout();\n    setUser(null);\n    setProfile(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"React Google Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), profile ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"ID: \", profile.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: profile.picture,\n        alt: \"user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"User Logged in\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", profile.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email Address: \", profile.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logOut,\n        children: \"Log out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Chatroom, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => login(),\n      children: \"Sign in with Google \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"AOyUI7Nt9SXji13Vnbi1q3a/r3A=\", false, function () {\n  return [useGoogleLogin];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","googleLogout","useGoogleLogin","axios","AdminChatroom","jsxDEV","_jsxDEV","App","_s","user","setUser","profile","setProfile","login","onSuccess","codeResponse","onError","error","console","log","get","access_token","headers","Authorization","Accept","then","res","data","addUserToDatabase","catch","err","googleProfile","userData","CUSTOMER_ID","id","toString","CUSTOMER_EMAIL","email","CUSTOMER_NAME","name","post","response","logOut","children","fileName","_jsxFileName","lineNumber","columnNumber","src","picture","alt","onClick","Chatroom","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { googleLogout, useGoogleLogin } from '@react-oauth/google';\nimport axios from 'axios';\n\nimport AdminChatroom from \"./components/AdminChatroom/AdminChatroom.tsx\";\n\nfunction App() {\n    const [user, setUser] = useState(null);\n    const [profile, setProfile] = useState(null);\n\n    const login = useGoogleLogin({\n        onSuccess: (codeResponse) => setUser(codeResponse),\n        onError: (error) => console.log('Login Failed:', error)\n    });\n\n    useEffect(() => {\n        if (user) {\n            axios\n                .get(`https://www.googleapis.com/oauth2/v1/userinfo?access_token=${user.access_token}`, {\n                    headers: {\n                        Authorization: `Bearer ${user.access_token}`,\n                        Accept: 'application/json'\n                    }\n                })\n                .then((res) => {\n                    setProfile(res.data);\n                    addUserToDatabase(res.data); // Call the function to add user to database\n                })\n                .catch((err) => console.log(err));\n        }\n    }, [user]);\n\n    const addUserToDatabase = (googleProfile) => {\n        const userData = {\n            CUSTOMER_ID: googleProfile.id.toString(), // Assuming CUSTOMER_ID is a string\n            CUSTOMER_EMAIL: googleProfile.email,\n            CUSTOMER_NAME: googleProfile.name\n        };\n\n        axios.post('http://localhost:3000/setUsers', userData)\n            .then(response => console.log('User added successfully:', response))\n            .catch(error => console.error('Failed to add user:', error));\n    };\n\n    const logOut = () => {\n        googleLogout();\n        setUser(null);\n        setProfile(null);\n    };\n\n    return (\n        <div>\n            <h2>React Google Login</h2>\n            {profile ? (\n                <div>\n                    <p>ID: {profile.id}</p>\n                    <img src={profile.picture} alt=\"user\" />\n                    <h3>User Logged in</h3>\n                    <p>Name: {profile.name}</p>\n                    <p>Email Address: {profile.email}</p>\n                    <button onClick={logOut}>Log out</button>\n                    <Chatroom />\n                </div>\n            ) : (\n                <button onClick={() => login()}>Sign in with Google ðŸš€</button>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}