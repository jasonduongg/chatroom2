{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/UserPanel/UserPanel.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DynamicChatroom from \"../../components/DynamicChatroom/DynamicChatroom.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPanel({\n  user\n}) {\n  _s();\n  const [chatrooms, setChatrooms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  ;\n  const [activeChatroomId, setActiveChatroomId] = useState(null);\n  const [inviteCodeInput, setInviteCodeInput] = useState('');\n  const fetchChatrooms = async () => {\n    try {\n      const response = await fetch(`http://localhost:443/user/roomids?customerId=${user.id}&customerEmail=${user.email}`);\n      if (response.ok) {\n        const data = await response.json();\n        console.log(\"ran\");\n        console.log(data);\n        setChatrooms(data);\n      } else {\n        console.error('Failed to fetch chatrooms:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching chatrooms:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchChatrooms();\n  }, [user.id]);\n  const handleToggleChatroom = roomId => {\n    if (chatrooms.some(chatroom => chatroom.roomId === roomId)) {\n      setActiveChatroomId(roomId === activeChatroomId ? null : roomId);\n    } else {\n      setActiveChatroomId(null);\n    }\n  };\n  const handleLeaveRoom = async roomId => {\n    try {\n      const response = await fetch('http://localhost:443/leaveRoom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId,\n          customerId: user.id,\n          customerEmail: user.email\n        })\n      });\n      console.log(\"ran1\");\n      if (response.ok) {\n        console.log(\"ran\");\n        fetchChatrooms();\n        console.log('Room left successfully');\n        if (roomId === activeChatroomId) {\n          setActiveChatroomId(null);\n        }\n      } else {\n        const errorText = await response.text();\n        console.error(`Failed to leaving room: ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error leaving room:', error);\n    }\n  };\n  const handleAddUserToChatroom = async () => {\n    try {\n      // Assuming your server has an endpoint to handle this operation\n      const response = await fetch('http://localhost:443/addUserToChatroom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          customerId: user.id,\n          inviteCode: inviteCodeInput,\n          customerEmail: user.email\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        console.log(`User added to chatroom with ID: ${data.chatroomId}`); // Assuming server sends back the chatroom ID\n        setInviteCodeInput(''); // Clear the input field after successful operation\n        fetchChatrooms();\n      } else {\n        console.error('Failed to add user to chatroom:', await response.text());\n      }\n    } catch (error) {\n      console.error('Error adding user to chatroom:', error);\n    }\n  };\n  console.log(chatrooms);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatrooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inviteCodeInput,\n      onChange: e => setInviteCodeInput(e.target.value),\n      placeholder: \"Enter invite code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddUserToChatroom,\n      children: \"Add to Chatroom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this) : chatrooms.map(chatroom => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"ID:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 29\n        }, this), \" \", chatroom.roomId, \",\", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }, this), \" \", chatroom.roomName, \",\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleLeaveRoom(chatroom.roomId),\n          children: \"Leave\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleToggleChatroom(chatroom.roomId),\n          children: \"Toggle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 29\n        }, this)]\n      }, chatroom.roomId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"active-chatroom\",\n      children: activeChatroomId && /*#__PURE__*/_jsxDEV(DynamicChatroom, {\n        user: user,\n        isLoggedIn: true,\n        chatroomId: activeChatroomId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminPanel, \"4Eo5Nf94l8ZSYXHKsuYANNPMyiw=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","useEffect","DynamicChatroom","jsxDEV","_jsxDEV","AdminPanel","user","_s","chatrooms","setChatrooms","loading","setLoading","activeChatroomId","setActiveChatroomId","inviteCodeInput","setInviteCodeInput","fetchChatrooms","response","fetch","id","email","ok","data","json","console","log","error","status","handleToggleChatroom","roomId","some","chatroom","handleLeaveRoom","method","headers","body","JSON","stringify","customerId","customerEmail","errorText","text","handleAddUserToChatroom","inviteCode","chatroomId","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","roomName","className","isLoggedIn","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/UserPanel/UserPanel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport DynamicChatroom from \"../../components/DynamicChatroom/DynamicChatroom.tsx\";\n\nfunction AdminPanel({ user }) {\n    const [chatrooms, setChatrooms] = useState([]);\n    const [loading, setLoading] = useState(true);;\n    const [activeChatroomId, setActiveChatroomId] = useState(null);\n    const [inviteCodeInput, setInviteCodeInput] = useState('');\n\n    const fetchChatrooms = async () => {\n        try {\n            const response = await fetch(`http://localhost:443/user/roomids?customerId=${user.id}&customerEmail=${user.email}`);\n            if (response.ok) {\n                const data = await response.json();\n                console.log(\"ran\")\n                console.log(data)\n                setChatrooms(data);\n            } else {\n                console.error('Failed to fetch chatrooms:', response.status);\n            }\n        } catch (error) {\n            console.error('Error fetching chatrooms:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        fetchChatrooms();\n    }, [user.id]);\n\n    const handleToggleChatroom = (roomId) => {\n        if (chatrooms.some(chatroom => chatroom.roomId === roomId)) {\n            setActiveChatroomId(roomId === activeChatroomId ? null : roomId);\n        } else {\n            setActiveChatroomId(null);\n        }\n    };\n\n    const handleLeaveRoom = async (roomId) => {\n        try {\n            const response = await fetch('http://localhost:443/leaveRoom', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    roomId,\n                    customerId: user.id,\n                    customerEmail: user.email\n                })\n            });\n            console.log(\"ran1\")\n            if (response.ok) {\n                console.log(\"ran\")\n                fetchChatrooms();\n                console.log('Room left successfully');\n                if (roomId === activeChatroomId) {\n                    setActiveChatroomId(null)\n                }\n            } else {\n                const errorText = await response.text();\n                console.error(`Failed to leaving room: ${errorText}`);\n            }\n        } catch (error) {\n            console.error('Error leaving room:', error);\n        }\n    };\n\n    const handleAddUserToChatroom = async () => {\n        try {\n            // Assuming your server has an endpoint to handle this operation\n            const response = await fetch('http://localhost:443/addUserToChatroom', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    customerId: user.id,\n                    inviteCode: inviteCodeInput,\n                    customerEmail: user.email\n                })\n            });\n    \n            if (response.ok) {\n                const data = await response.json();\n                console.log(`User added to chatroom with ID: ${data.chatroomId}`);  // Assuming server sends back the chatroom ID\n                setInviteCodeInput('');  // Clear the input field after successful operation\n                fetchChatrooms()\n            } else {\n                console.error('Failed to add user to chatroom:', await response.text());\n            }\n        } catch (error) {\n            console.error('Error adding user to chatroom:', error);\n        }\n    };\n    \n    console.log(chatrooms)\n    return (\n        <div>\n            <h2>Chatrooms</h2>\n            <input\n                type=\"text\"\n                value={inviteCodeInput}\n                onChange={(e) => setInviteCodeInput(e.target.value)}\n                placeholder=\"Enter invite code\"\n            />\n            <button onClick={handleAddUserToChatroom}>Add to Chatroom</button>\n        \n            <ul>\n                {loading ? (\n                    <p>Loading...</p>\n                ) : (\n                    chatrooms.map(chatroom => (\n                        <li key={chatroom.roomId}>\n                            <strong>ID:</strong> {chatroom.roomId},\n                            <strong>Name:</strong> {chatroom.roomName},\n                            <button onClick={() => handleLeaveRoom(chatroom.roomId)}>Leave</button>\n                            <button onClick={() => handleToggleChatroom(chatroom.roomId)}>Toggle</button>\n                        </li>\n                    ))\n                )}\n            </ul>\n\n            <div className=\"active-chatroom\">\n                {activeChatroomId && (\n                    <DynamicChatroom user={user} isLoggedIn={true} chatroomId={activeChatroomId} />\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default AdminPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}