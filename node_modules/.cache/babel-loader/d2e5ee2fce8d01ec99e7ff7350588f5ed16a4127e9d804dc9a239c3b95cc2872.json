{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/Chatroom/Chatroom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Ably from 'ably';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatroom({\n  user,\n  isLoggedIn\n}) {\n  _s();\n  const [ablyClient, setAblyClient] = useState(null);\n  const [channel, setChannel] = useState(null);\n  const [messages, setMessages] = useState({});\n  const [newMessage, setNewMessage] = useState('');\n  const bottomOfChat = useRef(null);\n  const initializeChat = async () => {\n    if (isLoggedIn && !ablyClient) {\n      try {\n        // Retrive all previous messages from DB\n        const response = await fetch('http://localhost:443/getMessages');\n        const fetchedMessages = await response.json();\n        const parsedMessages = fetchedMessages.map(message => {\n          const {\n            TIMESTAMP,\n            CUSTOMER_ID,\n            CUSTOMER_NAME,\n            MESSAGE\n          } = message;\n          return {\n            timestamp: TIMESTAMP,\n            customer_id: CUSTOMER_ID,\n            customer_name: CUSTOMER_NAME,\n            message: MESSAGE\n          };\n        });\n        setMessages(parsedMessages);\n\n        // Set up Ably\n        const ablyKey = 'gWdAvw.DxcdmQ:WYmbfWlXmbZBC5UeOKWXretPGWjPUCb_F-_x9-JpME4';\n        const client = new Ably.Realtime.Promise({\n          key: ablyKey\n        });\n        const chatChannel = client.channels.get('chat');\n\n        // Handles Ably new messages\n        chatChannel.subscribe(message => {\n          setMessages(prevMessages => {\n            const index = prevMessages.findIndex(msg => msg.timestamp === message.data.timestamp);\n            if (index !== -1) {\n              const updatedMessages = [...prevMessages];\n              updatedMessages[index] = message.data;\n              return updatedMessages;\n            } else {\n              return [...prevMessages, message.data];\n            }\n          });\n        });\n        setAblyClient(client);\n        setChannel(chatChannel);\n      } catch (error) {\n        console.error('Error Initializing Chatroom:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (isLoggedIn && !ablyClient) {\n      initializeChat();\n    }\n  }, [isLoggedIn]);\n  const sendMessage = async () => {\n    if (channel && newMessage.trim() !== '') {\n      const uuid = uuidv4();\n      const userDataSTREAM = {\n        timestamp: uuid,\n        customer_name: user.name,\n        customer_id: user.id,\n        message: newMessage\n      };\n      const userDataDB = {\n        TIMESTAMP: uuid,\n        CUSTOMER_NAME: user.name,\n        CUSTOMER_ID: user.id,\n        MESSAGE: newMessage\n      };\n      channel.publish(\"update\", userDataSTREAM);\n      fetch('http://localhost:443/sendMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userDataDB)\n      }).then(response => console.log('Message added', response)).catch(error => console.error('Failed to add message:', error));\n    }\n    setNewMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-row justify-center items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-min\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl mb-2\",\n        children: \"User Chatroom Prototype\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-[300px] w-[500px] overflow-scroll snap-y border-2 border-black mb-2\",\n        children: [Object.entries(messages).map(([index, message]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-lg pl-2\",\n            children: \"[\" + message.timestamp.slice(0, 4) + \"] \" + message.customer_name + \": \" + message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 25\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: bottomOfChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"border-2 border-black w-full min-h-min\",\n        type: \"text\",\n        value: newMessage,\n        placeholder: \"message Chatroom\",\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Add Poll Options \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"border-2 border-black pl-2 pr-2\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatroom, \"xVijoMN7edB0whY3p8+KFmDwy50=\");\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Ably","v4","uuidv4","jsxDEV","_jsxDEV","Chatroom","user","isLoggedIn","_s","ablyClient","setAblyClient","channel","setChannel","messages","setMessages","newMessage","setNewMessage","bottomOfChat","initializeChat","response","fetch","fetchedMessages","json","parsedMessages","map","message","TIMESTAMP","CUSTOMER_ID","CUSTOMER_NAME","MESSAGE","timestamp","customer_id","customer_name","ablyKey","client","Realtime","Promise","key","chatChannel","channels","get","subscribe","prevMessages","index","findIndex","msg","data","updatedMessages","error","console","sendMessage","trim","uuid","userDataSTREAM","name","id","userDataDB","publish","method","headers","body","JSON","stringify","then","log","catch","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","slice","ref","type","value","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/Chatroom/Chatroom.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Ably from 'ably';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction Chatroom({ user, isLoggedIn }) {\n\n    const [ablyClient, setAblyClient] = useState(null);\n    const [channel, setChannel] = useState(null);\n\n    const [messages, setMessages] = useState({});\n    const [newMessage, setNewMessage] = useState('');\n\n    const bottomOfChat = useRef(null);\n\n    const initializeChat = async () => {\n        if (isLoggedIn && !ablyClient) {\n            try {\n\n                // Retrive all previous messages from DB\n                const response = await fetch('http://localhost:443/getMessages');\n                const fetchedMessages = await response.json();\n                const parsedMessages = fetchedMessages.map(message => {\n                    const { TIMESTAMP, CUSTOMER_ID, CUSTOMER_NAME, MESSAGE } = message;\n                    return {\n                        timestamp: TIMESTAMP,\n                        customer_id: CUSTOMER_ID,\n                        customer_name: CUSTOMER_NAME,\n                        message: MESSAGE\n\n                    };\n                });                \n                setMessages(parsedMessages);\n\n                // Set up Ably\n                const ablyKey = 'gWdAvw.DxcdmQ:WYmbfWlXmbZBC5UeOKWXretPGWjPUCb_F-_x9-JpME4'\n                const client = new Ably.Realtime.Promise({ key: ablyKey });\n                const chatChannel = client.channels.get('chat');\n\n                // Handles Ably new messages\n                chatChannel.subscribe((message) => {   \n                    setMessages(prevMessages => {\n                        const index = prevMessages.findIndex(msg => msg.timestamp === message.data.timestamp);\n                        if (index !== -1) {\n                            const updatedMessages = [...prevMessages];\n                            updatedMessages[index] = message.data;\n                            return updatedMessages;\n                        } else {\n                            return [...prevMessages, message.data];\n                        }\n                    });\n                });\n                setAblyClient(client);\n                setChannel(chatChannel);\n            \n            } catch (error) {\n                console.error('Error Initializing Chatroom:', error);\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (isLoggedIn && !ablyClient) {\n            initializeChat();\n        }\n    }, [isLoggedIn]);\n\n\n    const sendMessage = async () => {\n        if (channel && newMessage.trim() !== '') {\n            const uuid = uuidv4();\n            const userDataSTREAM = {\n                timestamp: uuid,\n                customer_name: user.name,\n                customer_id: user.id,\n                message: newMessage\n                \n\n            }; \n            const userDataDB = {\n                TIMESTAMP: uuid,\n                CUSTOMER_NAME: user.name,\n                CUSTOMER_ID: user.id,\n                MESSAGE: newMessage\n                \n\n            }; \n            channel.publish(\"update\", userDataSTREAM);\n            fetch('http://localhost:443/sendMessage', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userDataDB)\n            })  \n            .then(response => console.log('Message added', response))\n            .catch(error => console.error('Failed to add message:', error));\n        }\n        setNewMessage(\"\")\n    };\n\n    return (\n        <div className=\"flex flex-row justify-center items-center\">\n            <div className=\"w-min\">\n                <h1 className='text-2xl mb-2'>User Chatroom Prototype</h1>\n                <div className='h-[300px] w-[500px] overflow-scroll snap-y border-2 border-black mb-2'>\n\n                {Object.entries(messages).map(([index, message]) => (\n                    <div key={index}>\n                        <p className='text-lg pl-2'>{\"[\" + message.timestamp.slice(0,4) + \"] \" + message.customer_name + \": \" + message.message}</p>\n                    </div>\n                ))}\n\n                <div ref={bottomOfChat}></div>\n                </div>\n            </div>\n            <div>\n                    <textarea className=\"border-2 border-black w-full min-h-min\" type=\"text\" value={newMessage} placeholder=\"message Chatroom\" onChange={(e) => setNewMessage(e.target.value)} />\n                    <p> Add Poll Options </p>\n\n                        \n\n                    <button className=\"border-2 border-black pl-2 pr-2\" onClick={sendMessage}>Send</button>\n                </div>\n        </div>\n    );\n}\n\nexport default Chatroom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}