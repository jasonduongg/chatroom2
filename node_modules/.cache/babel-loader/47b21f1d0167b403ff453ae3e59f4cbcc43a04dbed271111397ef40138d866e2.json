{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { googleLogout, useGoogleLogin } from '@react-oauth/google';\nimport Chatroom from \"./components/Chatroom/Chatroom.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [profile, setProfile] = useState(null);\n  const [isAdmin, setAdmin] = useState(false);\n  const login = useGoogleLogin({\n    onSuccess: codeResponse => setUser(codeResponse),\n    onError: error => console.log('Login Failed:', error)\n  });\n  useEffect(() => {\n    if (user) {\n      fetch(`https://www.googleapis.com/oauth2/v1/userinfo?access_token=${user.access_token}`, {\n        headers: {\n          Authorization: `Bearer ${user.access_token}`,\n          Accept: 'application/json'\n        }\n      }).then(response => response.json()).then(data => {\n        setProfile(data);\n        addUserToDatabase(data); // Call the function to add user to database\n      }).catch(error => console.log(error));\n    }\n  }, [user]);\n  const addUserToDatabase = googleProfile => {\n    const userData = {\n      CUSTOMER_ID: parseInt(googleProfile.id),\n      // Assuming CUSTOMER_ID is a string\n      CUSTOMER_EMAIL: googleProfile.email,\n      CUSTOMER_NAME: googleProfile.name\n    };\n    console.log(userData);\n    fetch('http://localhost:443/setUsers', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => console.log('User added successfully:', response)).catch(error => console.error('Failed to add user:', error));\n  };\n  const logOut = () => {\n    googleLogout();\n    setUser(null);\n    setProfile(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: profile ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"border-2 border-red-400 p-2 \",\n        onClick: logOut,\n        children: \"Log out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Chatroom, {\n        user: profile,\n        isLoggedIn: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this), isAdmin ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"ADMIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"NOT ADMIN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => login(),\n      children: \"Sign in with Google \\uD83D\\uDE80\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"IXjAod9OE71Gr1cRnHnFKhGzByY=\", false, function () {\n  return [useGoogleLogin];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","googleLogout","useGoogleLogin","Chatroom","jsxDEV","_jsxDEV","App","_s","user","setUser","profile","setProfile","isAdmin","setAdmin","login","onSuccess","codeResponse","onError","error","console","log","fetch","access_token","headers","Authorization","Accept","then","response","json","data","addUserToDatabase","catch","googleProfile","userData","CUSTOMER_ID","parseInt","id","CUSTOMER_EMAIL","email","CUSTOMER_NAME","name","method","body","JSON","stringify","logOut","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","isLoggedIn","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { googleLogout, useGoogleLogin } from '@react-oauth/google';\n\nimport Chatroom from \"./components/Chatroom/Chatroom.tsx\"\n\n\nfunction App() {\n    const [user, setUser] = useState(null);\n    const [profile, setProfile] = useState(null);\n    const [isAdmin, setAdmin] = useState(false);\n\n    const login = useGoogleLogin({\n        onSuccess: (codeResponse) => setUser(codeResponse),\n        onError: (error) => console.log('Login Failed:', error)\n    });\n\n    useEffect(() => {\n        if (user) {\n            fetch(`https://www.googleapis.com/oauth2/v1/userinfo?access_token=${user.access_token}`, {\n                headers: {\n                    Authorization: `Bearer ${user.access_token}`,\n                    Accept: 'application/json'\n                }\n            })\n            .then(response => response.json())\n            .then(data => {\n                setProfile(data);\n                addUserToDatabase(data); // Call the function to add user to database\n            })\n            .catch(error => console.log(error));\n        }\n    }, [user]);\n\n    const addUserToDatabase = (googleProfile) => {\n        const userData = {\n            CUSTOMER_ID: parseInt(googleProfile.id), // Assuming CUSTOMER_ID is a string\n            CUSTOMER_EMAIL: googleProfile.email,\n            CUSTOMER_NAME: googleProfile.name\n        };\n\n        console.log(userData)\n        fetch('http://localhost:443/setUsers', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        })  \n        .then(response => console.log('User added successfully:', response))\n        .catch(error => console.error('Failed to add user:', error));\n    };\n\n    const logOut = () => {\n        googleLogout();\n        setUser(null);\n        setProfile(null);\n    };\n\n    return (\n        <div>\n            {profile ? (\n                <div>\n                    {/* <p>ID: {profile.id}</p>\n                    <img src={profile.picture} alt=\"user\" />\n                    <h3>User Logged in</h3>\n                    <p>Name: {profile.name}</p>\n                    <p>Email Address: {profile.email}</p> */}\n\n                    <button className=\"border-2 border-red-400 p-2 \"onClick={logOut}>Log out</button>\n                    <Chatroom user={profile} isLoggedIn={true} />\n                    {isAdmin ? (\n                        <div>ADMIN</div>\n                    ) : (\n                        <div>NOT ADMIN</div>\n                    )}\n                </div>\n            ) : (\n                <button onClick={() => login()}>Sign in with Google ðŸš€</button>\n            )}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}