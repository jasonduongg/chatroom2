{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport DynamicChatroom from \"../../components/DynamicChatroom/DynamicChatroom.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPanel({\n  user\n}) {\n  _s();\n  const [chatrooms, setChatrooms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [newRoomName, setNewRoomName] = useState(''); // State variable for the new room name input\n\n  const fetchChatrooms = async () => {\n    try {\n      const response = await fetch(`http://localhost:443/admin/roomids?customerId=${user.id}&customerEmail=${user.email}`);\n      if (response.ok) {\n        const data = await response.json();\n        setChatrooms(data);\n      } else {\n        console.error('Failed to fetch chatrooms:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching chatrooms:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchChatrooms();\n  }, [user.id]);\n  const handleDeleteRoom = async roomId => {\n    try {\n      const response = await fetch('http://localhost:443/deleteRoom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId: roomId,\n          customerId: user.id,\n          customerEmail: user.email\n        })\n      });\n      if (response.ok) {\n        // Refresh the chatroom list after deletion\n        fetchChatrooms();\n        console.log('Room deleted successfully');\n      } else {\n        const errorText = await response.text();\n        console.error(`Failed to delete room: ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error deleting room:', error);\n    }\n  };\n  const handleCreateRoom = async () => {\n    try {\n      const roomId = uuidv4(); // Generate a UUID for the roomId\n      const response = await fetch('http://localhost:443/createRoom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId: roomId,\n          // Use the generated UUID for roomId\n          customerId: user.id,\n          customerEmail: user.email,\n          roomName: newRoomName // Use the input room name\n        })\n      });\n      if (response.ok) {\n        // Refresh the chatroom list after creation\n        fetchChatrooms();\n        console.log('Room created successfully');\n      } else {\n        const errorText = await response.text();\n        console.error(`Failed to create room: ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error creating room:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatrooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: newRoomName,\n      onChange: e => setNewRoomName(e.target.value) // Update the new room name when input changes\n      ,\n      placeholder: \"Enter room name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreateRoom,\n      children: \"Create Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [chatrooms.map(chatroom => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 33\n          }, this), \" \", chatroom.roomId, \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 73\n          }, this), \" \", chatroom.roomName, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteRoom(chatroom.roomId),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 33\n          }, this)]\n        }, chatroom.roomId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(DynamicChatroom, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 24\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminPanel, \"NGmRuxebDQ4tNUjVa2VHnw4R168=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","useEffect","v4","uuidv4","DynamicChatroom","jsxDEV","_jsxDEV","AdminPanel","user","_s","chatrooms","setChatrooms","loading","setLoading","newRoomName","setNewRoomName","fetchChatrooms","response","fetch","id","email","ok","data","json","console","error","status","handleDeleteRoom","roomId","method","headers","body","JSON","stringify","customerId","customerEmail","log","errorText","text","handleCreateRoom","roomName","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","map","chatroom","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport DynamicChatroom from \"../../components/DynamicChatroom/DynamicChatroom.tsx\"\n\nfunction AdminPanel({ user }) {\n    const [chatrooms, setChatrooms] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [newRoomName, setNewRoomName] = useState(''); // State variable for the new room name input\n\n    const fetchChatrooms = async () => {\n        try {\n            const response = await fetch(`http://localhost:443/admin/roomids?customerId=${user.id}&customerEmail=${user.email}`);\n            if (response.ok) {\n                const data = await response.json();\n                setChatrooms(data);\n            } else {\n                console.error('Failed to fetch chatrooms:', response.status);\n            }\n        } catch (error) {\n            console.error('Error fetching chatrooms:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n    \n    useEffect(() => {\n        fetchChatrooms();\n    }, [user.id]);\n\n    const handleDeleteRoom = async (roomId) => {\n        try {\n            const response = await fetch('http://localhost:443/deleteRoom', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    roomId: roomId,\n                    customerId: user.id,\n                    customerEmail: user.email\n                })\n            });\n    \n            if (response.ok) {\n                // Refresh the chatroom list after deletion\n                fetchChatrooms();\n                console.log('Room deleted successfully');\n            } else {\n                const errorText = await response.text();\n                console.error(`Failed to delete room: ${errorText}`);\n            }\n        } catch (error) {\n            console.error('Error deleting room:', error);\n        }\n    };\n    \n    const handleCreateRoom = async () => {\n        try {\n            const roomId = uuidv4(); // Generate a UUID for the roomId\n            const response = await fetch('http://localhost:443/createRoom', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    roomId: roomId, // Use the generated UUID for roomId\n                    customerId: user.id,\n                    customerEmail: user.email,\n                    roomName: newRoomName // Use the input room name\n                })\n            });\n    \n            if (response.ok) {\n                // Refresh the chatroom list after creation\n                fetchChatrooms();\n                console.log('Room created successfully');\n            } else {\n                const errorText = await response.text();\n                console.error(`Failed to create room: ${errorText}`);\n            }\n        } catch (error) {\n            console.error('Error creating room:', error);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Chatrooms</h2>\n            <input\n                type=\"text\"\n                value={newRoomName}\n                onChange={(e) => setNewRoomName(e.target.value)} // Update the new room name when input changes\n                placeholder=\"Enter room name\"\n            />\n            <button onClick={handleCreateRoom}>Create Room</button> {/* Add the button for creating a new room */}\n            <div>\n                {loading ? (\n                    <p>Loading...</p>\n                ) : (\n                    <ul>\n                        {chatrooms.map(chatroom => (\n                            <li key={chatroom.roomId}>\n                                <strong>ID:</strong> {chatroom.roomId}, <strong>Name:</strong> {chatroom.roomName}\n                                <button onClick={() => handleDeleteRoom(chatroom.roomId)}>Delete</button>\n                            </li>\n                        ))}\n                       <DynamicChatroom></DynamicChatroom>\n                    </ul>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default AdminPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}