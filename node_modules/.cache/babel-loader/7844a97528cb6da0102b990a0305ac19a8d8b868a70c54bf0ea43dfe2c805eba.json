{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPanel({\n  user\n}) {\n  _s();\n  const [chatrooms, setChatrooms] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const fetchChatrooms = async () => {\n    try {\n      const response = await fetch(`http://localhost:443/admin/roomids?customerId=${user.id}&customerEmail=${user.email}`);\n      if (response.ok) {\n        const data = await response.json();\n        setChatrooms(data);\n      } else {\n        console.error('Failed to fetch chatrooms:', response.status);\n      }\n    } catch (error) {\n      console.error('Error fetching chatrooms:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchChatrooms();\n  }, [user.id]);\n  const handleDeleteRoom = async roomId => {\n    try {\n      const response = await fetch('http://localhost:443/deleteRoom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId: roomId,\n          customerId: user.id,\n          customerEmail: user.email\n        })\n      });\n      if (response.ok) {\n        // Refresh the chatroom list after deletion\n        fetchChatrooms();\n        console.log('Room deleted successfully');\n      } else {\n        const errorText = await response.text();\n        console.error(`Failed to delete room: ${errorText}`);\n      }\n    } catch (error) {\n      console.error('Error deleting room:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chatrooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log('Create room button clicked'),\n      children: \"Create Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: chatrooms.map(chatroom => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 33\n          }, this), \" \", chatroom.roomId, \", \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 73\n          }, this), \" \", chatroom.roomName, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteRoom(chatroom.roomId),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 33\n          }, this)]\n        }, chatroom.roomId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminPanel, \"KFki3i5a2VEIkMekD0kJHAX3YUU=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AdminPanel","user","_s","chatrooms","setChatrooms","loading","setLoading","fetchChatrooms","response","fetch","id","email","ok","data","json","console","error","status","handleDeleteRoom","roomId","method","headers","body","JSON","stringify","customerId","customerEmail","log","errorText","text","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","chatroom","roomName","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction AdminPanel({ user }) {\n    const [chatrooms, setChatrooms] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const fetchChatrooms = async () => {\n        try {\n            const response = await fetch(`http://localhost:443/admin/roomids?customerId=${user.id}&customerEmail=${user.email}`);\n            if (response.ok) {\n                const data = await response.json();\n                setChatrooms(data);\n            } else {\n                console.error('Failed to fetch chatrooms:', response.status);\n            }\n        } catch (error) {\n            console.error('Error fetching chatrooms:', error);\n        } finally {\n            setLoading(false);\n        }\n    };\n    useEffect(() => {\n      \n\n        fetchChatrooms();\n    }, [user.id]);\n\n    const handleDeleteRoom = async (roomId) => {\n        try {\n            const response = await fetch('http://localhost:443/deleteRoom', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    roomId: roomId,\n                    customerId: user.id,\n                    customerEmail: user.email\n                })\n            });\n    \n            if (response.ok) {\n                // Refresh the chatroom list after deletion\n                fetchChatrooms();\n                console.log('Room deleted successfully');\n            } else {\n                const errorText = await response.text();\n                console.error(`Failed to delete room: ${errorText}`);\n            }\n        } catch (error) {\n            console.error('Error deleting room:', error);\n        }\n    };\n    \n\n    return (\n        <div>\n            <h2>Chatrooms</h2>\n            <button onClick={() => console.log('Create room button clicked')}>Create Room</button>\n            <div>\n                {loading ? (\n                    <p>Loading...</p>\n                ) : (\n                    <ul>\n                        {chatrooms.map(chatroom => (\n                            <li key={chatroom.roomId}>\n                                <strong>ID:</strong> {chatroom.roomId}, <strong>Name:</strong> {chatroom.roomName}\n                                <button onClick={() => handleDeleteRoom(chatroom.roomId)}>Delete</button>\n                            </li>\n                        ))}\n                    </ul>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default AdminPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}