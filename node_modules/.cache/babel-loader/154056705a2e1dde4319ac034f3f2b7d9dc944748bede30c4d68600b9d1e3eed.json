{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPanel({\n  user\n}) {\n  _s();\n  const [statusMessage, setStatusMessage] = useState('');\n  const createNewChatroom = async () => {\n    const roomId = uuidv4(); // Generate a new room ID using UUID\n\n    try {\n      // Step 1: Create a new chatroom\n      const response = await fetch(`http://localhost:443/createRoom`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId\n        })\n      });\n      if (!response.ok) throw new Error('Failed to create new chatroom.');\n\n      // Step 2: Update admins table\n      const adminResponse = await fetch('http://localhost:443/updateAdmins', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          customerId: user.id,\n          roomId\n        })\n      });\n      if (!adminResponse.ok) {\n        // Rollback creation of the room\n        await fetch(`http://localhost:443/deleteRoom`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            roomId\n          })\n        });\n        throw new Error('Failed to update admins table.');\n      }\n\n      // Step 3: Add chatroom to chatrooms table\n      const chatroomResponse = await fetch('http://localhost:443/addChatroom', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId\n        })\n      });\n      if (!chatroomResponse.ok) {\n        // Rollback previous operations\n        await Promise.all([fetch(`http://localhost:443/deleteRoom`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            roomId\n          })\n        }), fetch('http://localhost:443/removeAdminRoom', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            customerId: user.id,\n            roomId\n          })\n        })]);\n        throw new Error('Failed to add chatroom to chatrooms table.');\n      }\n      setStatusMessage('New chatroom created and added to both admins and chatrooms tables.');\n    } catch (error) {\n      console.error('Error:', error);\n      setStatusMessage(`Error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"ADMIN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-64 w-96 bg-red-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewChatroom,\n        children: \"Create new Chatroom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 mt-4\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminPanel, \"znaw+wgxB6f/quJtF1u1uW9YfPk=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","v4","uuidv4","jsxDEV","_jsxDEV","AdminPanel","user","_s","statusMessage","setStatusMessage","createNewChatroom","roomId","response","fetch","method","headers","body","JSON","stringify","ok","Error","adminResponse","customerId","id","chatroomResponse","Promise","all","error","console","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction AdminPanel({ user }) {\n    const [statusMessage, setStatusMessage] = useState('');\n\n    const createNewChatroom = async () => {\n        const roomId = uuidv4(); // Generate a new room ID using UUID\n\n        try {\n            // Step 1: Create a new chatroom\n            const response = await fetch(`http://localhost:443/createRoom`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ roomId })\n            });\n\n            if (!response.ok) throw new Error('Failed to create new chatroom.');\n\n            // Step 2: Update admins table\n            const adminResponse = await fetch('http://localhost:443/updateAdmins', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    customerId: user.id,\n                    roomId\n                })\n            });\n\n            if (!adminResponse.ok) {\n                // Rollback creation of the room\n                await fetch(`http://localhost:443/deleteRoom`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ roomId })\n                });\n                throw new Error('Failed to update admins table.');\n            }\n\n            // Step 3: Add chatroom to chatrooms table\n            const chatroomResponse = await fetch('http://localhost:443/addChatroom', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ roomId })\n            });\n\n            if (!chatroomResponse.ok) {\n                // Rollback previous operations\n                await Promise.all([\n                    fetch(`http://localhost:443/deleteRoom`, {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({ roomId })\n                    }),\n                    fetch('http://localhost:443/removeAdminRoom', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            customerId: user.id,\n                            roomId\n                        })\n                    })\n                ]);\n                throw new Error('Failed to add chatroom to chatrooms table.');\n            }\n\n            setStatusMessage('New chatroom created and added to both admins and chatrooms tables.');\n        } catch (error) {\n            console.error('Error:', error);\n            setStatusMessage(`Error: ${error.message}`);\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col items-center\">\n            <span>ADMIN</span>\n            <div className=\"h-64 w-96 bg-red-200\">\n                <button onClick={createNewChatroom}>Create new Chatroom</button>\n                {statusMessage && <p className=\"text-red-500 mt-4\">{statusMessage}</p>}\n            </div>\n        </div>\n    );\n}\n\nexport default AdminPanel;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}