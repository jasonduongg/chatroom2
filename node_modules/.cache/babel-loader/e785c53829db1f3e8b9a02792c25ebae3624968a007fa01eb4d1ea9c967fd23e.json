{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPanel({\n  user\n}) {\n  _s();\n  const [chatrooms, setChatrooms] = useState([]);\n  const createNewChatroom = async () => {\n    // Generate a new room ID using UUID\n    const roomId = uuidv4();\n    try {\n      // Call the API to create a new chatroom\n      const response = await fetch(`http://localhost:443/createRoom?roomId=${roomId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId: roomId\n        })\n      });\n      if (response.ok) {\n        // If the chatroom is successfully created, update the admins table with the new room ID\n        const adminResponse = await fetch('YOUR_UPDATE_ADMINS_API_ENDPOINT', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            customerId: user.id,\n            roomId: roomId\n          })\n        });\n        if (adminResponse.ok) {\n          console.log('New chatroom created and added to admins table.');\n          // You can also update the UI to display the new chatroom if needed\n        } else {\n          console.error('Failed to update admins table.');\n        }\n      } else {\n        console.error('Failed to create new chatroom.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"ADMIN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-64 w-96 bg-red-200\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewChatroom,\n        children: \"Create new Chatroom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminPanel, \"kUr8i0NHsia102Ni3wrTRYBDzOM=\");\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","useState","v4","uuidv4","jsxDEV","_jsxDEV","AdminPanel","user","_s","chatrooms","setChatrooms","createNewChatroom","roomId","response","fetch","method","headers","body","JSON","stringify","ok","adminResponse","customerId","id","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction AdminPanel({ user }) {\n    const [chatrooms, setChatrooms] = useState([]);\n\n    const createNewChatroom = async () => {\n        // Generate a new room ID using UUID\n        const roomId = uuidv4();\n\n        try {\n            // Call the API to create a new chatroom\n            const response = await fetch(`http://localhost:443/createRoom?roomId=${roomId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    roomId: roomId\n                })\n            });\n\n            if (response.ok) {\n                // If the chatroom is successfully created, update the admins table with the new room ID\n                const adminResponse = await fetch('YOUR_UPDATE_ADMINS_API_ENDPOINT', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        customerId: user.id,\n                        roomId: roomId\n                    })\n                });\n\n                if (adminResponse.ok) {\n                    console.log('New chatroom created and added to admins table.');\n                    // You can also update the UI to display the new chatroom if needed\n                } else {\n                    console.error('Failed to update admins table.');\n                }\n            } else {\n                console.error('Failed to create new chatroom.');\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col items-center\">\n            <span>ADMIN</span>\n            <div className=\"h-64 w-96 bg-red-200\">\n                <button onClick={createNewChatroom}>Create new Chatroom</button>\n            </div>\n        </div>\n    );\n}\n\nexport default AdminPanel;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAmB,OAAO;AAClD,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,UAAUA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC;IACA,MAAMC,MAAM,GAAGT,MAAM,CAAC,CAAC;IAEvB,IAAI;MACA;MACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAE,0CAAyCF,MAAO,EAAC,EAAE;QAC7EG,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBP,MAAM,EAAEA;QACZ,CAAC;MACL,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;QACb;QACA,MAAMC,aAAa,GAAG,MAAMP,KAAK,CAAC,iCAAiC,EAAE;UACjEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjBG,UAAU,EAAEf,IAAI,CAACgB,EAAE;YACnBX,MAAM,EAAEA;UACZ,CAAC;QACL,CAAC,CAAC;QAEF,IAAIS,aAAa,CAACD,EAAE,EAAE;UAClBI,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;UAC9D;QACJ,CAAC,MAAM;UACHD,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAC;QACnD;MACJ,CAAC,MAAM;QACHF,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAC;MACnD;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,oBACIrB,OAAA;IAAKsB,SAAS,EAAC,4BAA4B;IAAAC,QAAA,gBACvCvB,OAAA;MAAAuB,QAAA,EAAM;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAClB3B,OAAA;MAAKsB,SAAS,EAAC,sBAAsB;MAAAC,QAAA,eACjCvB,OAAA;QAAQ4B,OAAO,EAAEtB,iBAAkB;QAAAiB,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACxB,EAAA,CAtDQF,UAAU;AAAA4B,EAAA,GAAV5B,UAAU;AAwDnB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}