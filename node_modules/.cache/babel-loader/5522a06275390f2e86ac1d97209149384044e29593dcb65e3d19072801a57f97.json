{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/Chatroom/Chatroom.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport Ably from 'ably';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chatroom({\n  user,\n  isLoggedIn\n}) {\n  _s();\n  const [messages, setMessages] = useState({});\n  const [ablyClient, setAblyClient] = useState(null);\n  const [channel, setChannel] = useState(null);\n  const [newMessage, setNewMessage] = useState('');\n  const [pollOptions, setPollOptions] = useState({});\n  const bottomOfChat = useRef(null);\n  useEffect(() => {\n    if (bottomOfChat.current) {\n      bottomOfChat.current.scrollIntoView();\n    }\n  }, [messages]);\n  const initializeChat = async () => {\n    if (isLoggedIn && !ablyClient) {\n      try {\n        // const response = await fetch('http://localhost:5000/fetchMessages');\n        // const fetchedMessages = await response.json();\n        // const parsedMessages = fetchedMessages.map(message => {\n        //     const { uuid, user, text, pollOptions } = message;\n        //     const poll = pollOptions\n        //     ? Object.keys(pollOptions).reduce((acc, key) => {\n        //         acc[key] = pollOptions[key];\n        //         return acc;\n        //         }, {})\n        //     : {}\n        //     return {\n        //         uuid: uuid,\n        //         username: user,\n        //         message: text,\n        //         pollOptions: poll\n        //     };\n        // });                \n        // setMessages(parsedMessages);\n        const ablyKey = 'gWdAvw.DxcdmQ:WYmbfWlXmbZBC5UeOKWXretPGWjPUCb_F-_x9-JpME4';\n        const client = new Ably.Realtime.Promise({\n          key: ablyKey\n        });\n        const chatChannel = client.channels.get('chat');\n        console.log(\"ran\");\n        chatChannel.subscribe(message => {\n          console.log(message);\n          setMessages(prevMessages => {\n            const index = prevMessages.findIndex(msg => msg.uuid === message.data.uuid);\n            if (index !== -1) {\n              const updatedMessages = [...prevMessages];\n              console.log(message.data);\n              updatedMessages[index] = message.data;\n              return updatedMessages;\n            } else {\n              return [...prevMessages, message.data];\n            }\n          });\n        });\n        setAblyClient(client);\n        setChannel(chatChannel);\n      } catch (error) {\n        console.error('Error fetching messages:', error);\n      }\n    }\n  };\n  useEffect(() => {\n    if (isLoggedIn && !ablyClient) {\n      initializeChat();\n    }\n  }, [isLoggedIn]);\n  const sendMessage = async () => {\n    console.log(channel);\n    if (channel && newMessage.trim() !== '') {\n      const uuid = uuidv4();\n      const userData = {\n        TIMESTAMP: uuid,\n        CUSTOMER_NAME: user.name,\n        CUSTOMER_ID: parseInt(user.id),\n        MESSAGE: newMessage\n      };\n      channel.publish(\"update\", userData);\n      fetch('http://localhost:443/sendMessage', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      }).then(response => console.log('User added successfully:', response)).catch(error => console.error('Failed to add user:', error));\n    }\n  };\n  const addUserToDatabase = googleProfile => {\n    const userData = {\n      CUSTOMER_ID: parseInt(googleProfile.id),\n      // Assuming CUSTOMER_ID is a string\n      CUSTOMER_EMAIL: googleProfile.email,\n      CUSTOMER_NAME: googleProfile.name\n    };\n    console.log(userData);\n    fetch('http://localhost:443/setUsers', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(userData)\n    }).then(response => console.log('User added successfully:', response)).catch(error => console.error('Failed to add user:', error));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-row justify-center items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-min\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl mb-2\",\n        children: \"User Chatroom Prototype\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"h-[300px] w-[500px] overflow-scroll snap-y border-2 border-black mb-2\",\n        children: [Object.entries(messages).map(([index, message]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-lg pl-2\",\n            children: message.username + \": \" + message.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: bottomOfChat\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"border-2 border-black w-full min-h-min\",\n        type: \"text\",\n        value: newMessage,\n        placeholder: \"message Chatroom\",\n        onChange: e => setNewMessage(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Add Poll Options \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"border-2 border-black pl-2 pr-2\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n_s(Chatroom, \"ax6+WlA5UGAaET2Ju/guLdfse00=\");\n_c = Chatroom;\nexport default Chatroom;\nvar _c;\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Ably","v4","uuidv4","jsxDEV","_jsxDEV","Chatroom","user","isLoggedIn","_s","messages","setMessages","ablyClient","setAblyClient","channel","setChannel","newMessage","setNewMessage","pollOptions","setPollOptions","bottomOfChat","current","scrollIntoView","initializeChat","ablyKey","client","Realtime","Promise","key","chatChannel","channels","get","console","log","subscribe","message","prevMessages","index","findIndex","msg","uuid","data","updatedMessages","error","sendMessage","trim","userData","TIMESTAMP","CUSTOMER_NAME","name","CUSTOMER_ID","parseInt","id","MESSAGE","publish","fetch","method","headers","body","JSON","stringify","then","response","catch","addUserToDatabase","googleProfile","CUSTOMER_EMAIL","email","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","username","ref","type","value","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/Chatroom/Chatroom.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Ably from 'ably';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction Chatroom({ user, isLoggedIn }) {\n    const [messages, setMessages] = useState({});\n    const [ablyClient, setAblyClient] = useState(null);\n    const [channel, setChannel] = useState(null);\n\n    const [newMessage, setNewMessage] = useState('');\n    const [pollOptions, setPollOptions] = useState({});\n\n    const bottomOfChat = useRef(null);\n\n    useEffect(() => {\n        if (bottomOfChat.current) {\n            bottomOfChat.current.scrollIntoView();\n        }\n    }, [messages]);\n\n    const initializeChat = async () => {\n        if (isLoggedIn && !ablyClient) {\n            try {\n                // const response = await fetch('http://localhost:5000/fetchMessages');\n                // const fetchedMessages = await response.json();\n                // const parsedMessages = fetchedMessages.map(message => {\n                //     const { uuid, user, text, pollOptions } = message;\n                //     const poll = pollOptions\n                //     ? Object.keys(pollOptions).reduce((acc, key) => {\n                //         acc[key] = pollOptions[key];\n                //         return acc;\n                //         }, {})\n                //     : {}\n                //     return {\n                //         uuid: uuid,\n                //         username: user,\n                //         message: text,\n                //         pollOptions: poll\n                //     };\n                // });                \n                // setMessages(parsedMessages);\n                const ablyKey = 'gWdAvw.DxcdmQ:WYmbfWlXmbZBC5UeOKWXretPGWjPUCb_F-_x9-JpME4'\n                const client = new Ably.Realtime.Promise({ key: ablyKey });\n                const chatChannel = client.channels.get('chat');\n                console.log(\"ran\")\n                chatChannel.subscribe((message) => {   \n                    console.log(message)\n                    setMessages(prevMessages => {\n                        const index = prevMessages.findIndex(msg => msg.uuid === message.data.uuid);\n                        if (index !== -1) {\n                            const updatedMessages = [...prevMessages];\n                            console.log(message.data)\n                            updatedMessages[index] = message.data;\n                            return updatedMessages;\n                        } else {\n                            return [...prevMessages, message.data];\n                        }\n                    });\n                });\n                setAblyClient(client);\n                setChannel(chatChannel);\n            \n            } catch (error) {\n                console.error('Error fetching messages:', error);\n            }\n        }\n    };\n    \n    useEffect(() => {\n        if (isLoggedIn && !ablyClient) {\n            initializeChat();\n        }\n    }, [isLoggedIn]);\n    \n\n    const sendMessage = async () => {\n        console.log(channel)\n        if (channel && newMessage.trim() !== '') {\n            const uuid = uuidv4();\n            const userData = {\n                TIMESTAMP: uuid,\n                CUSTOMER_NAME: user.name,\n                CUSTOMER_ID: parseInt(user.id),\n                MESSAGE: newMessage\n                \n\n            };\n            channel.publish(\"update\", userData);\n            fetch('http://localhost:443/sendMessage', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(userData)\n            })  \n            .then(response => console.log('User added successfully:', response))\n            .catch(error => console.error('Failed to add user:', error));\n        }\n    };\n\n    const addUserToDatabase = (googleProfile) => {\n        const userData = {\n            CUSTOMER_ID: parseInt(googleProfile.id), // Assuming CUSTOMER_ID is a string\n            CUSTOMER_EMAIL: googleProfile.email,\n            CUSTOMER_NAME: googleProfile.name\n        };\n\n        console.log(userData)\n        fetch('http://localhost:443/setUsers', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(userData)\n        })  \n        .then(response => console.log('User added successfully:', response))\n        .catch(error => console.error('Failed to add user:', error));\n    };\n\n\n    return (\n        <div className=\"flex flex-row justify-center items-center\">\n            <div className=\"w-min\">\n                <h1 className='text-2xl mb-2'>User Chatroom Prototype</h1>\n                <div className='h-[300px] w-[500px] overflow-scroll snap-y border-2 border-black mb-2'>\n\n                {Object.entries(messages).map(([index, message]) => (\n                    <div key={index}>\n                        <p className='text-lg pl-2'>{message.username + \": \" + message.message}</p>\n                    </div>\n                ))}\n\n                <div ref={bottomOfChat}></div>\n                </div>\n            </div>\n            <div>\n                    <textarea className=\"border-2 border-black w-full min-h-min\" type=\"text\" value={newMessage} placeholder=\"message Chatroom\" onChange={(e) => setNewMessage(e.target.value)} />\n                    <p> Add Poll Options </p>\n\n                        \n\n                    <button className=\"border-2 border-black pl-2 pr-2\" onClick={sendMessage}>Send</button>\n                </div>\n        </div>\n    );\n}\n\nexport default Chatroom;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}