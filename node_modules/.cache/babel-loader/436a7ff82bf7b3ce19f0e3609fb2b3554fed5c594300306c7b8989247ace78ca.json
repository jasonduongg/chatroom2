{"ast":null,"code":"var _jsxFileName = \"/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx\";\nimport React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPanel({\n  user\n}) {\n  const createNewChatroom = async () => {\n    // Generate a new room ID using UUID\n    const roomId = uuidv4();\n    try {\n      // Call the API to create a new chatroom\n      const response = await fetch(`http://localhost:443/createRoom`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          roomId: roomId\n        })\n      });\n      if (response.ok) {\n        // If the chatroom is successfully created, update the admins table with the new room ID\n        const adminResponse = await fetch('YOUR_UPDATE_ADMINS_API_ENDPOINT', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            customerId: user.id,\n            roomId: roomId\n          })\n        });\n        if (adminResponse.ok) {\n          // If the admin table is successfully updated, add the new chatroom to the chatrooms table\n          const chatroomResponse = await fetch('YOUR_ADD_CHATROOM_API_ENDPOINT', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              roomId: roomId\n            })\n          });\n          if (chatroomResponse.ok) {\n            console.log('New chatroom created and added to both admins and chatrooms tables.');\n          } else {\n            console.error('Failed to add chatroom to chatrooms table.');\n          }\n        } else {\n          console.error('Failed to update admins table.');\n        }\n      } else {\n        console.error('Failed to create new chatroom.');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"ADMIN\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"h-64 w-96 bg-red-200\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewChatroom,\n        children: \"Create new Chatroom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_c = AdminPanel;\nexport default AdminPanel;\nvar _c;\n$RefreshReg$(_c, \"AdminPanel\");","map":{"version":3,"names":["React","v4","uuidv4","jsxDEV","_jsxDEV","AdminPanel","user","createNewChatroom","roomId","response","fetch","method","headers","body","JSON","stringify","ok","adminResponse","customerId","id","chatroomResponse","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/trinhduong/chatroom2/my-react-app/src/components/AdminPanel/AdminPanel.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nfunction AdminPanel({ user }) {\n    const createNewChatroom = async () => {\n        // Generate a new room ID using UUID\n        const roomId = uuidv4();\n\n        try {\n            // Call the API to create a new chatroom\n            const response = await fetch(`http://localhost:443/createRoom`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    roomId: roomId\n                })\n            });\n\n            if (response.ok) {\n                // If the chatroom is successfully created, update the admins table with the new room ID\n                const adminResponse = await fetch('YOUR_UPDATE_ADMINS_API_ENDPOINT', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({\n                        customerId: user.id,\n                        roomId: roomId\n                    })\n                });\n\n                if (adminResponse.ok) {\n                    // If the admin table is successfully updated, add the new chatroom to the chatrooms table\n                    const chatroomResponse = await fetch('YOUR_ADD_CHATROOM_API_ENDPOINT', {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json'\n                        },\n                        body: JSON.stringify({\n                            roomId: roomId\n                        })\n                    });\n\n                    if (chatroomResponse.ok) {\n                        console.log('New chatroom created and added to both admins and chatrooms tables.');\n                    } else {\n                        console.error('Failed to add chatroom to chatrooms table.');\n                    }\n                } else {\n                    console.error('Failed to update admins table.');\n                }\n            } else {\n                console.error('Failed to create new chatroom.');\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    return (\n        <div className=\"flex flex-col items-center\">\n            <span>ADMIN</span>\n            <div className=\"h-64 w-96 bg-red-200\">\n                <button onClick={createNewChatroom}>Create new Chatroom</button>\n            </div>\n        </div>\n    );\n}\n\nexport default AdminPanel;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAoB,OAAO;AACvC,SAASC,EAAE,IAAIC,MAAM,QAAQ,MAAM;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,UAAUA,CAAC;EAAEC;AAAK,CAAC,EAAE;EAC1B,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC;IACA,MAAMC,MAAM,GAAGN,MAAM,CAAC,CAAC;IAEvB,IAAI;MACA;MACA,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAE,iCAAgC,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjBP,MAAM,EAAEA;QACZ,CAAC;MACL,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;QACb;QACA,MAAMC,aAAa,GAAG,MAAMP,KAAK,CAAC,iCAAiC,EAAE;UACjEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACjBG,UAAU,EAAEZ,IAAI,CAACa,EAAE;YACnBX,MAAM,EAAEA;UACZ,CAAC;QACL,CAAC,CAAC;QAEF,IAAIS,aAAa,CAACD,EAAE,EAAE;UAClB;UACA,MAAMI,gBAAgB,GAAG,MAAMV,KAAK,CAAC,gCAAgC,EAAE;YACnEC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACL,cAAc,EAAE;YACpB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACjBP,MAAM,EAAEA;YACZ,CAAC;UACL,CAAC,CAAC;UAEF,IAAIY,gBAAgB,CAACJ,EAAE,EAAE;YACrBK,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC;UACtF,CAAC,MAAM;YACHD,OAAO,CAACE,KAAK,CAAC,4CAA4C,CAAC;UAC/D;QACJ,CAAC,MAAM;UACHF,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAC;QACnD;MACJ,CAAC,MAAM;QACHF,OAAO,CAACE,KAAK,CAAC,gCAAgC,CAAC;MACnD;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC;EACJ,CAAC;EAED,oBACInB,OAAA;IAAKoB,SAAS,EAAC,4BAA4B;IAAAC,QAAA,gBACvCrB,OAAA;MAAAqB,QAAA,EAAM;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAClBzB,OAAA;MAAKoB,SAAS,EAAC,sBAAsB;MAAAC,QAAA,eACjCrB,OAAA;QAAQ0B,OAAO,EAAEvB,iBAAkB;QAAAkB,QAAA,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACE,EAAA,GAlEQ1B,UAAU;AAoEnB,eAAeA,UAAU;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}